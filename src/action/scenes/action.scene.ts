import {ButtonColor, KeyboardBuilder, MessageContext} from 'vk-io'
import {AddStep, Ctx, Scene} from 'nestjs-vk'
import {UseFilters} from '@nestjs/common'

import {USER_WAIT_LIKE_SCENE} from '../../user/user.constants'
import {UserService} from '../../user/user.service'
import {ACTION_SCENE} from '../action.constats'
import {ActionService} from '../action.service'
import {VkExceptionFilter} from '../../common'
import {ActionType} from '../action.entity'

@UseFilters(VkExceptionFilter)
@Scene(ACTION_SCENE)
export class ActionScene {
  constructor(
    private readonly _actionService: ActionService,
    private readonly _userService: UserService,
  ) {}

  @AddStep(0)
  async onMainEvent(@Ctx() ctx: MessageContext) {
    // –µ—Å–ª–∏ –Ω–µ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ + —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –∑–∞—Ö–æ–¥
    if (!ctx.hasMessagePayload && !ctx.scene.step.firstTime) {
      return ctx.send('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞')
    }

    if (!ctx.scene.step.firstTime) {
      const {value, target} = ctx.messagePayload

      if (value === 0) {
        await this._actionService.add(target, ctx.senderId, ActionType.LIKE)
      }

      if (value === 1) {
        return ctx.scene.step.go(1)
      }

      if (value === 2) {
        await this._actionService.add(target, ctx.senderId, ActionType.DISLIKE)
      }

      if (value === 3) {
        return ctx.scene.enter(USER_WAIT_LIKE_SCENE)
      }
    }

    const senderId = ctx.senderId
    const nextUser = await this._actionService.findNext(senderId)

    if (!nextUser) {
      return ctx.scene.step.go(2)
    }

    const keyboard = new KeyboardBuilder()
      .textButton({label: '‚ù§', color: ButtonColor.POSITIVE, payload: {value: 0, target: nextUser.id}})
      .textButton({label: 'üíå', color: ButtonColor.POSITIVE, payload: {value: 1, target: nextUser.id}})
      .textButton({label: 'üëé', color: ButtonColor.NEGATIVE, payload: {value: 2, target: nextUser.id}})
      .textButton({label: 'üí§', color: ButtonColor.PRIMARY, payload: {value: 3}})

    const profile = this._userService.getQuestionnaireText(nextUser)
    await ctx.sendPhotos({value: nextUser.photo!}, {message: profile, keyboard})
  }

  @AddStep(1)
  async onSendLikeWithMessage(@Ctx() ctx: MessageContext) {
    if (ctx.scene.step.firstTime) {
      const keyboard = new KeyboardBuilder()
        .textButton({label: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', color: ButtonColor.PRIMARY, payload: {value: 0}})
      return ctx.send('–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {keyboard})
    }

    if (ctx.hasMessagePayload) {
      return ctx.scene.step.go(0)
    }

    const currentUserId = ctx.senderId
    const questionnaireIdFormCache = await this._actionService.getQuestionnaireIdFormCache(currentUserId)

    if (!questionnaireIdFormCache) {
      await ctx.send('–í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç—ã –∏—Å—Ç–µ–∫–ª–æ, –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.')
      return ctx.scene.step.go(0)
    }

    await this._actionService.add(questionnaireIdFormCache, currentUserId, ActionType.LIKE, ctx.text)
    return ctx.scene.step.go(0)
  }

  @AddStep(2)
  async onQuestionnaireEnd(@Ctx() ctx: MessageContext) {
    if (ctx.scene.step.firstTime) {
      const keyboard = new KeyboardBuilder()
        .textButton({label: '–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫', color: ButtonColor.POSITIVE, payload: {value: 0}})
        .textButton({label: 'üí§', color: ButtonColor.PRIMARY, payload: {value: 1}})
      return ctx.send('–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ', {keyboard})
    }

    if (!ctx.hasMessagePayload) {
      return ctx.send('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞')
    }

    if (ctx.messagePayload.value === 0) {
      return ctx.scene.step.go(0)
    }
    return ctx.scene.enter(USER_WAIT_LIKE_SCENE)
  }

  @AddStep(3)
  async onSeeLikes(@Ctx() ctx: MessageContext) {
    if (!ctx.scene.step.firstTime) {
      const {value, target} = ctx.messagePayload

      if (value === 0) {
        await this._actionService.sendMutualSympathy(ctx.senderId, target, ActionType.LIKE)
        await ctx.send(`–û—Ç–ª–∏—á–Ω–æ! –ù–∞–¥–µ—é—Å—å —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ–¥–µ—Ç–µ –≤—Ä–µ–º—è ;) –ù–∞—á–∏–Ω–∞–π –æ–±—â–∞—Ç—å—Å—è üëâ vk.com/id${target}`)
      }

      if (value === 1) {
        await this._actionService.sendMutualSympathy(ctx.senderId, target, ActionType.DISLIKE)
      }
    }

    const likes = await this._actionService.getLikesForUser(ctx.senderId)
    const likesCount = likes.length
    if (!likesCount) {
      return ctx.scene.step.go(0)
    }

    const like = likes[0]
    const hasMoreLike = likesCount - 1 > 0
    const keyboard = new KeyboardBuilder()
      .textButton({label: '‚ù§', color: ButtonColor.POSITIVE, payload: {value: 0, target: like.id}})
      .textButton({label: 'üëé', color: ButtonColor.NEGATIVE, payload: {value: 1, target: like.id}})

    const likeMessage = like.message
      ? `–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–±—èüíå: ${like.message}`
      : ''

    await ctx.sendPhotos(
      {value: like.photo!},
      {
        message: `
        –ö–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞${hasMoreLike ? `(–∏ –µ—â—ë ${likesCount - 1})` : ''}:
        
        ${this._userService.getQuestionnaireText(like)}
        
        ${likeMessage}
        `,
        keyboard
      }
    )
  }

  @AddStep(4)
  async onStartSearch(@Ctx() ctx: MessageContext) {
    return ctx.scene.step.go(0)
  }
}
